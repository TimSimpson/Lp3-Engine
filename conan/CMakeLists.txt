
# This CMake super project uses Conan.
# By placing Conan support here, it keeps the root project clean and portable
# between package managers.

project(lp3_engine-Parent CXX)
cmake_minimum_required(VERSION 3.3.2 FATAL_ERROR)

set (CMAKE_CXX_STANDARD 17)
enable_testing()
include(ExternalProject)

# Note: This project is using the "cmake" Conan generator.
# Using "cmake_paths" is a bit cleaner, but you have to explicitly call Conan
# with `-DCMAKE_TOOLCHAIN_FILE=conan_paths.cmake` (for some reason, that won't
# happen automatically when you use `conan build`.
#
# Since _this_ CMake file is already not portable, calling Conan from here
# doesn't matter anyway.

include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
conan_basic_setup(TARGETS)

# We pass in TARGETS so that Conan will create modern CMake targets.
# However, we have two problems:
#
# 1. In typical CMake usage, installing a header only library makes that
#    library universally available. However, if we use TARGETS when calling
#    conan_basic_setup, we have to add dependencies on the modern targets
#    for everything, even header only libraries.
#
#    The work around is to add these to `include_directories` globally here:

function(add_header_library SRC)
    get_property(var TARGET ${SRC} PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
    include_directories(${var})
endfunction()

add_header_library(CONAN_PKG::gsl_microsoft)
add_header_library(CONAN_PKG::catch2)


# 2. The names of the modern CMake targets generated by Conan are not standard.
#    They all start with CONAN_PKG and are nothing like what a typical CMake
#    install would name them.
#
#    Intriguingly, certain CMake packages from Conan- such as Catch2- generate
#    CMake config package files and can work as you expect. But this doesn't
#    happen for all packages, only things that happened to include CMake
#    support in their source tree originally when the Conan packages were made.
#
#    Another wrinkle: if you use the `cmake_paths` generator with Conan (which
#    requires changing the toolchain file used by CMake) then the modern CMake
#    targets are changed yet again! In particular, SDL2 changes from
#    `CONAN_PKG::sdl2` to `SDL2::SDL2-static`.
#
#    Maybe this isn't fair, but I've come to the conclusion that if you want
#    to write "clean" standard CMake and use Conan, you really can't win.
#    The only solution is to have a slightly dirty Conan specific file like
#    this.
#
#    For that matter, you can't really win in the current, non-standardized
#    world of C++ CMake packages where there may be dozens of potential packages
#    for certain popular libraries such as SDL2. The only option is to rename
#    them, like this.

function(clone_library DST SRC)
    add_library(${DST} INTERFACE IMPORTED)

    get_property(var TARGET ${SRC} PROPERTY INTERFACE_LINK_LIBRARIES)
    set_property(TARGET ${DST} PROPERTY INTERFACE_LINK_LIBRARIES ${var})

    get_property(var TARGET ${SRC} PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
    set_property(TARGET ${DST} PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${var})

    get_property(var TARGET ${SRC} PROPERTY INTERFACE_COMPILE_DEFINITIONS)
    set_property(TARGET ${DST} PROPERTY INTERFACE_COMPILE_DEFINITIONS ${var})

    get_property(var TARGET ${SRC} PROPERTY INTERFACE_COMPILE_OPTIONS)
    set_property(TARGET ${DST} PROPERTY INTERFACE_COMPILE_OPTIONS ${var})
endfunction()


# Do the find_package macro trick to use the local subprojects and introduce
# the renamed (cloned) Conan libraries when find_package is called.

set(subprojects Lp3_Core Lp3_Sims Lp3_Gl Lp3_Gfx Lp3_ImGui Lp3_Input Lp3_Mix)

macro(find_package )
    if ("${ARGV0}" STREQUAL "glm")
        clone_library(glm CONAN_PKG::glm)
    elseif ("${ARGV0}" STREQUAL "sdl2")
        clone_library(sdl2::sdl2 CONAN_PKG::sdl2)
        clone_library(sdl2::image CONAN_PKG::sdl2_image)
        clone_library(sdl2::ttf CONAN_PKG::sdl2_ttf)
    elseif(NOT ${ARGV0} IN_LIST subprojects)
        _find_package(${ARGV})
    endif()
endmacro()


set(LP3_SETUP_FOLDERS TRUE)  # Organizes VS folders

set(LP3_CORE_FULL true)
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/../core
                 ${CMAKE_CURRENT_BINARY_DIR}/core-output)

set(LP3_SIMS_FULL true)
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/../sims
                 ${CMAKE_CURRENT_BINARY_DIR}/sims-output)

set(LP3_GL_FULL true)
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/../gl
                 ${CMAKE_CURRENT_BINARY_DIR}/gl-output)

set(LP3_GFX_FULL true)
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/../gfx
                 ${CMAKE_CURRENT_BINARY_DIR}/gfx-output)

set(LP3_IMGUI_FULL true)
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/../imgui
                 ${CMAKE_CURRENT_BINARY_DIR}/imgui-output)

set(LP3_INPUT_FULL true)
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/../input
                 ${CMAKE_CURRENT_BINARY_DIR}/input-output)


# The Mix project isn't supported as there aren't any Conan packages for
# SDL2_mix... at least not yet.
# set(LP3_MIX_FULL true)
# add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/../mix
#                  ${CMAKE_CURRENT_BINARY_DIR}/mix-output)
